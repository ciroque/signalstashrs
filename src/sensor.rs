// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SensorData {
    #[prost(uint64, tag = "1")]
    pub timestamp: u64,
    #[prost(float, tag = "2")]
    pub datum: f32,
    #[prost(enumeration = "Domain", tag = "3")]
    pub domain: i32,
    #[prost(bytes = "vec", tag = "4")]
    pub device_id: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SensorDataBatch {
    #[prost(message, repeated, tag = "1")]
    pub samples: ::prost::alloc::vec::Vec<SensorData>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Domain {
    Unspecified = 0,
    SoundPressureLevel = 1,
}
impl Domain {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Domain::Unspecified => "UNSPECIFIED",
            Domain::SoundPressureLevel => "SOUND_PRESSURE_LEVEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNSPECIFIED" => Some(Self::Unspecified),
            "SOUND_PRESSURE_LEVEL" => Some(Self::SoundPressureLevel),
            _ => None,
        }
    }
}
